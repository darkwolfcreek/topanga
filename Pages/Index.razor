@using System.Linq


@page "/"

<PageTitle>Tone Generator</PageTitle>

<div class="container mt-4">
    <h1>Tone Generator</h1>
    <p>Adjust the settings and generate tones.</p>

    <div class="form-group">
        <label for="frequencySlider">Frequency (Hz)</label>
        <input type="range" class="form-control-range" id="frequencySlider" min="20" max="20000" @bind="frequency">
    </div>

    <div class="form-group">
        <label for="volumeSlider">Volume</label>
        <input type="range" class="form-control-range" id="volumeSlider" min="0" max="1" step="0.01" @bind="volume" @oninput="AdjustVolume">
    </div>

    <div class="form-group">
        <label for="oscillatorType">Oscillator Type</label>
        <select @bind="oscillatorType" class="form-control">
            <option value="sine">Sine</option>
            <option value="square">Square</option>
            <option value="sawtooth">Sawtooth</option>
            <option value="triangle">Triangle</option>
        </select>
    </div>

    <div class="form-group">
        <label for="impulseFrequencySlider">Impulse Frequency (Hz)</label>
        <input type="range" class="form-control-range" id="impulseFrequencySlider" min="0" max="100" step="0.1" @bind="impulseFrequency">
        <p>Current: @impulseFrequency Hz</p>
    </div>

    <div>
        @foreach (var note in noteFrequencies)
        {
            <button class="btn @(currentlyPlayingNote?.Frequency == note.Frequency ? "btn-danger" : "btn-secondary") m-1"
                    @onclick="() => PlayNote(note)">
                @note.Name
            </button>
        }
    </div>

    @if (currentlyPlayingNote == null)
    {
        <button class="btn btn-primary" @onclick="StartTone">Start Tone</button>
        <button class="btn btn-primary" @onclick="PlayMidi">Play MIDI</button>
    }
    else
    {
        <button class="btn btn-danger" @onclick="StopTone">Stop Tone</button>
    }

    <div class="form-group">
        <label for="zoomSlider">Zoom</label>
        <input type="range" class="form-control-range" id="zoomSlider" min="0.5" max="3" step="0.1" @bind="zoomLevel">
    </div>

    <div class="row">
        <div class="col-md-12" style="overflow-x: auto; overflow-y: scroll; height: 720px;">
            <div style="width: 15000px;">
                @foreach (var note in noteFrequencies)
                {
                    <div class="d-flex border-bottom" style="height: 30px;">
                        <div class="p-1 text-center" style="width: 100px; background-color: lightgray;">
                            @note.Name
                        </div>

                        <div style="flex-grow: 1; position: relative;">
                            @foreach (var midiNote in midiNotes)
                            {
                                @if (NoteMatches(midiNote, note))
                                {
                                    <div style="position: absolute; left: @GetNoteStartPosition(midiNote); width: @GetNoteWidth(midiNote); height: 100%; background-color: @(IsCurrentlyPlaying(midiNote) ? "#FF0000" : "#90EE90");"></div>
                                }
                            }
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@code {
    private int? currentlyPlayingMidiNoteNumber = null;
    private double? currentlyPlayingMidiNoteStartTime = null;

    private List<NoteData> midiNotes;
    private bool isPlaying = false;
    @inject MidiFileService MidiService
    @using Melanchall.DryWetMidi.Core;
    @using Melanchall.DryWetMidi.Interaction;
    @using System;
    @using System.Collections.Generic;
    private double zoomLevel = 1.0;

    private double CalculateMostCommonNotePosition()
    {
        int noteHeight = 30;
        var mostCommonPosition = midiNotes
            .Select(n => NoteGenerator.GenerateNotes(1).FirstOrDefault(note => note.Frequency == n.Frequency))
            .Where(note => note != null)
            .GroupBy(note => NoteNameToMidiNumber(note.Name) / 12)
            .OrderByDescending(g => g.Count())
            .Select(g => g.Key * noteHeight)
            .FirstOrDefault();

        Console.WriteLine($"Most common position: {mostCommonPosition}");
        return mostCommonPosition;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
        }
    }

    private bool IsCurrentlyPlaying(NoteData midiNote)
    {
        return midiNote.NoteNumber == currentlyPlayingMidiNoteNumber && midiNote.StartTime == currentlyPlayingMidiNoteStartTime;
    }


    private bool NoteMatches(NoteData midiNote, Note pianoNote)
    {
        int midiNoteNumber = NoteNameToMidiNumber(pianoNote.Name);
        Console.WriteLine($"Matching {midiNote.NoteNumber} (MIDI) with {midiNoteNumber} ({pianoNote.Name})");
        return midiNote.NoteNumber == midiNoteNumber;
    }

    private int NoteNameToMidiNumber(string noteName)
    {
        var noteOffsets = new Dictionary<string, int>
    {
        {"C", 0}, {"C#", 1}, {"D", 2}, {"D#", 3}, {"E", 4},
        {"F", 5}, {"F#", 6}, {"G", 7}, {"G#", 8}, {"A", 9},
        {"A#", 10}, {"B", 11}
    };

        int octave;
        string note;

        if (noteName[1] == '#' || noteName[1] == 'b')
        {
            note = noteName.Substring(0, 2);
            octave = int.Parse(noteName.Substring(2));
        }
        else
        {
            note = noteName.Substring(0, 1);
            octave = int.Parse(noteName.Substring(1));
        }

        int offset = noteOffsets[note] + octave * 12;
        return offset;
    }

    private string GetNoteStartPosition(NoteData midiNote)
    {
        return $"{midiNote.StartTime * 50}px";
    }

    private string GetNoteWidth(NoteData midiNote)
    {
        return $"{midiNote.Duration * 50 * zoomLevel}px";
    }

    protected override async Task OnInitializedAsync()
    {
        midiNotes = MidiService.LoadAndParseMidiFile();
    }

    private async Task PlayMidi()
    {
        if (isPlaying) return;

        isPlaying = true;
        foreach (var note in midiNotes)
        {
            currentlyPlayingMidiNoteNumber = note.NoteNumber;
            currentlyPlayingMidiNoteStartTime = note.StartTime;
            await JSRuntime.InvokeVoidAsync("playTone", note.Frequency, oscillatorType, volume, 0);
            StateHasChanged();
            await Task.Delay(TimeSpan.FromSeconds(note.Duration));
            currentlyPlayingMidiNoteNumber = null;
            currentlyPlayingMidiNoteStartTime = null;
            StateHasChanged();
        }
        isPlaying = false;
    }

    public class MidiParser
    {
        private readonly IWebHostEnvironment _env;
        public int BPM { get; set; } = 250;

        public MidiParser(IWebHostEnvironment env)
        {
            _env = env;
        }

        public List<NoteData> ParseMidiFile()
        {
            string filePath = Path.Combine(_env.WebRootPath, "topanga.mid");
            var midiFile = MidiFile.Read(filePath);
            var tempoMap = midiFile.GetTempoMap();
            var notes = midiFile.GetNotes();
            var noteDataList = new List<NoteData>();

            foreach (var note in notes)
            {
                double frequency = ConvertMidiNoteToFrequency(note.NoteNumber);
                var metricTimeSpan = note.LengthAs<MetricTimeSpan>(tempoMap);
                double durationInSeconds = CalculateNoteDuration(metricTimeSpan, BPM);

                var metricStartTimeSpan = note.TimeAs<MetricTimeSpan>(tempoMap);
                double startTimeInSeconds = metricStartTimeSpan.TotalMicroseconds / 1000000.0;

                noteDataList.Add(new NoteData
                    {
                        NoteNumber = note.NoteNumber,
                        Frequency = frequency,
                        Duration = durationInSeconds,
                        StartTime = startTimeInSeconds
                    });

                Console.WriteLine($"Note: {note.NoteName}, Number: {note.NoteNumber}, Frequency: {frequency}, Duration: {durationInSeconds}s, Start Time: {startTimeInSeconds}s");
            }

            return noteDataList;
        }

        private static double ConvertMidiNoteToFrequency(int noteNumber)
        {
            return 440.0 * Math.Pow(2, (noteNumber - 69) / 12.0);
        }

        private double CalculateNoteDuration(MetricTimeSpan timeSpan, int bpm)
        {
            double beatDurationInSeconds = 60.0 / bpm;
            double totalBeats = timeSpan.TotalMicroseconds / 1000000.0 / beatDurationInSeconds;
            return totalBeats * beatDurationInSeconds;
        }
    }

    public class NoteData
    {
        public int NoteNumber { get; set; }
        public double Frequency { get; set; }
        public double Duration { get; set; }
        public double StartTime { get; set; }
    }

    public class MidiFileService
    {
        private readonly IWebHostEnvironment _env;
        private readonly MidiParser _midiParser;

        public MidiFileService(IWebHostEnvironment env)
        {
            _env = env;
            _midiParser = new MidiParser(_env);
        }

        public List<NoteData> LoadAndParseMidiFile()
        {
            var noteDataList = _midiParser.ParseMidiFile();
            return noteDataList;
        }

    }

    private double impulseFrequency = 0;
    @inject IJSRuntime JSRuntime
    private Note? currentlyPlayingNote = null;
    private double frequency = 440;
    private double volume = 0.5;
    private string oscillatorType = "sine";
    private bool isTonePlaying = false;
    private List<Note> noteFrequencies;
    private int octaveCount = 11;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        GenerateNoteFrequencies();
    }

    private void GenerateNoteFrequencies()
    {
        noteFrequencies = NoteGenerator.GenerateNotes(octaveCount);
        noteFrequencies.Reverse();
    }

    public class Note
    {
        public string Name { get; set; }
        public double Frequency { get; set; }
    }

    public static class NoteGenerator
    {
        public static List<Note> GenerateNotes(int octaveCount)
        {
            var notes = new List<Note>();
            double a4Frequency = 440.0;
            string[] noteNames = { "C", "C#", "D", "D#", "E", "F", "F#", "G", "G#", "A", "A#", "B" };

            for (int octave = 0; octave < octaveCount; octave++)
            {
                for (int i = 0; i < noteNames.Length; i++)
                {
                    double frequency = a4Frequency * Math.Pow(2, octave - 4 + (i - 9) / 12.0);
                    notes.Add(new Note { Name = noteNames[i] + octave, Frequency = frequency });
                }
            }

            return notes;
        }
    }

    private async Task PlayNote(Note note)
    {
        if (currentlyPlayingNote != null && currentlyPlayingNote.Frequency == note.Frequency)
        {
            await StopTone();
        }
        else if (currentlyPlayingNote != null)
        {
            await StopTone();
        }

        await JSRuntime.InvokeVoidAsync("playTone", note.Frequency, oscillatorType, volume, 0);
        currentlyPlayingNote = note;
    }

    private async Task StartTone()
    {
        if (currentlyPlayingNote == null || currentlyPlayingNote.Frequency != frequency)
        {
            currentlyPlayingNote = new Note { Frequency = frequency, Name = $"Custom ({frequency} Hz)" };
            await JSRuntime.InvokeVoidAsync("playTone", frequency, oscillatorType, volume, impulseFrequency);
        }
    }

    private async Task StopTone()
    {
        await JSRuntime.InvokeVoidAsync("stopTone");
        currentlyPlayingNote = null;
    }

    private async Task AdjustVolume()
    {
        await JSRuntime.InvokeVoidAsync("adjustVolume", volume);
    }
}
